#define BUZZER_PIN 32 // Define the GPIO pin connected to the buzzer
#define BUTTON_PIN 33 // Define the GPIO pin connected to the button

// Define note frequencies (in Hz)
#define NOTE_C4  261
#define NOTE_D4  294
#define NOTE_E4  329
#define NOTE_F4  349
#define NOTE_G4  392
#define NOTE_A4  440
#define NOTE_B4  1976
#define NOTE_C5  523

// Define note durations (in milliseconds)
#define DURATION_QUARTER 500
#define DURATION_EIGHTH  250
#define DURATION_HALF    1000
#define DURATION_WHOLE   2000

// Define speed levels
#define SPEED_SLOWEST 2.0
#define SPEED_SLOW 1.5
#define SPEED_NORMAL 1.0
#define SPEED_FAST 0.75
#define SPEED_FASTEST 0.5

volatile float speed = SPEED_NORMAL; // Current speed level
volatile bool buttonPressed = false; // Flag to indicate if the button was pressed

void playNote(int frequency, int duration) {
  tone(BUZZER_PIN, frequency, duration * speed);
  delay(duration * speed);
  noTone(BUZZER_PIN);
  delay(50 * speed); // Short pause between notes
}

void changeSpeed() {
  buttonPressed = true;
}

void setup() {
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), changeSpeed, FALLING);
}

void loop() {
  if (buttonPressed) {
    if (speed == SPEED_SLOWEST) {
      speed = SPEED_SLOW;
    } else if (speed == SPEED_SLOW) {
      speed = SPEED_NORMAL;
    } else if (speed == SPEED_NORMAL) {
      speed = SPEED_FAST;
    } else if (speed == SPEED_FAST) {
      speed = SPEED_FASTEST;
    } else {
      speed = SPEED_SLOWEST;
    }
    buttonPressed = false;
  }

  playNote(NOTE_C4, DURATION_QUARTER);
  playNote(NOTE_D4, DURATION_QUARTER);
  playNote(NOTE_E4, DURATION_QUARTER);
  delay(750 * speed);
  playNote(NOTE_C4, DURATION_QUARTER);
  playNote(NOTE_D4, DURATION_QUARTER);
  playNote(NOTE_E4, DURATION_QUARTER);
  
  delay(750 * speed);
  playNote(NOTE_B4, DURATION_QUARTER);
  playNote(NOTE_C5, DURATION_QUARTER);

  playNote(NOTE_F4, DURATION_QUARTER);
  playNote(NOTE_G4, DURATION_QUARTER);
  playNote(NOTE_A4, DURATION_QUARTER);

  delay(2000 * speed);
}
